
package Tables;

import TableElements.Group;
import TableElements.TableData;
import Utils.CsvUtils;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;

public class ObjectTable<T extends TableData> implements Table,Iterable<T>{
    private List<T> objects;
    public String name;

    public ObjectTable(String name) {
        objects = new ArrayList<>();
        this.name = name;
    }


    @Override
    public void save(){

        try {
            FileOutputStream fileOut = new FileOutputStream("Data/groups.csv");
            for(T object: objects) {
                String data = object.connectInLine();
                fileOut.write(data.getBytes());
            }
            fileOut.close();
        } catch (IOException e) {
            System.out.println("Exception"+e);
        }
    }

    @Override
    public void load() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("Data/groups.csv"));
            String line = reader.readLine();
            while (line != null) {
                String [] strings = line.split(",");

                TableData creator = new ;
                objects.add(new T());
                line = reader.readLine();

            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();

        }
    }

    @Override
    public void add(String... params) {
        int groupId = Integer.parseInt(params[0]);
        String groupNumber = params[1];
        int courseId = Integer.parseInt(params[2]);
        objects.add(new Group(groupId,groupNumber,courseId));

    }

    @Override
    public int size() {
        return objects.size();
    }

    @Override
    public String getTableName() {
        return name;
    }


    @Override
    public Iterator<Group> iterator() {
        return objects.iterator();
    }

    @Override
    public void forEach(Consumer<? super Group> action) {
        Iterable.super.forEach(action);
    }

}
